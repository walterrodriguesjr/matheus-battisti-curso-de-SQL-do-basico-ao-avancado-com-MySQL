https://www.udemy.com/course/sql-do-basico-ao-avancado-com-mysql-e-projeto/learn/lecture/25707458?start=0#overview


seção 1-introdução 


1-introdução do curso 
-explicação da proposta do curso 
-a linguagem utilizada no banco será MySQL, no back usará PHP 

2-apresentação do curso
-apresentando a estrutura e cronograma do curso 

3-o que é SQL? 
-é uma linguagem de banco de dados 
-linguagem struturada de consulta(structured query language)
-é a linguagem de banco de dados relacionais 
-trabalha usando querys (INSERT, UPTADE, SELECT)
-serve para manipular DB 

4-diferenças entre SQL e MySQL 
-SQL é a linguagem e MySQL é o SGBD (sistema de gerenciamento de banco de dados)
-MySQL é o software para trabalhar com a linguam SQL, no caso, o workbench 

5-o que é um banco de dados? 
-é onde armazenamos os dados do nosso sistema 
-cria-se os bancos de dados através do SQL (a linguam SQL, e usando o SGBD MySQL, neste caso)
-os bancos possuem tabelas, que por sua vez, possuem as colunas 

6-principais elementos de um banco de dados 
-diagrama do banco = é o projeto do banco, é um desenho do banco
-banco de dados = a entidade que vai guardar todos os elementos
-tabelas = a categoria dos dados, os estão as colunas e consequentemente os dados 
-colunas = tipos de informações que precisam salvar 
-dados = o dado final entregue pelo usuário 

7-instalação do MySQL no windows 
-instalação do XAMPP(para obter: PHP, MySQL e o Apache)

8-executando MySQL no terminal do windows 
-em algumas situações entra se pelo terminal, por não haver um SGBD visual instalado 
-configurado em editar variáveis de ambiente para adicionar no Path, o MySQL do Xampp
	C:\xampp\mysql\bin   inserido no Path 
-em seguida fecha o terminal, ao abrir acessa o MySQL usando: 
	mysql -u root
-comandos: 
	SHOW DATABASES; - exibir os bancos dentro do MySQL do XAMPP 

9-instalação do MySQL no linux 
-não necessário

10-instalação do MySQL Workbench 
-Workbench é um software para gerenciar bancos em SQL 
-INSTALADO DIRETO DO PRÓPRIO SITE 

11-problemas ao baixar/instalar o workbench 
-não necessário 

12-instalação do HeidiSQL 
-outra instalação de software SGBD de SQL, mais leve 
-não necessário

13-instalação do VScode 
-não necessário, já instalado 

14-extensão do mysql no vscode 
-a extensão é mysql 
-acessar bancos através da extensão do vscode 

15-arquivos do curso 
-arquivo contendo os comando SQL (https://github.com/matheusbattisti/curso_sql)

16-slides do curso 
-ok 

17-criando nosso primeiro banco de dados 
-instrução para criar um banco de dados: 
	CREATE DATABASE <nome>

18-a sintaxe do SQL 
-em SQL por convenção, todas as instruções são em maiúsculo, e os nomes em minúsculo (banco, tabela, coluna)
-todas as instruções devem finaizar ocm ponto e vírgula 

19-exercício 1
-criar um banco de dados, definir um nome para o banco 

20-o que é importação de banco de dados? 
-quando se tem um arquivo pronto de banco, com tabelas e dados, e inserimos no nosso SGBD 
-são originados de uma exportação 
-seria como pegar uma cópia do banco, não sendo o banco original em produção 

21-importando um banco de dados na prática 
-fazer o download dos arquivos do curso 
-acessa o MySQL pelo terminal
-cria-se um novo banco, nome empresa 
-seleciona o banco: USE <nome>
-depois utilizar o comando: source <nome>
-o comando USE faz o banco de dados ser o principal no momento 
-o terminal precisa estar na pasta do arquivo 
-para acessar um arquivo de banco de dados, deve se navegar com o terminal até a pasta onde ele está, 
	em seguida usar o: mysql -u root
-dentro do MySQL, criou se o banco empresa com: CREATE DATABASE empresa;
-em seguida USE empresa; para acessar o banco empresa criado;
-em seguida o source empresa.sql;  para pegar os dados do arquivo sql e por no banco 
-é possivel importar também, usando o workbench, indo em: Server/Data import 
-o melhor é fazer no terminal mesmo 

22-selecionando os dados de uma tabela 
-para selecionar todos os dados de uma tabela 
	SELECT * FROM <nome da tabela>

23-exercício 2 
-selecionar os dados da tabela servicos 

24-como tirar o máximo de proveito deste curso 
-executar todas as instruções da aula 
-fazer os exercício 
-criar os próprios exemplos 

25-conclusão da seção 
-OK


seção 2-gerenciando bancos de dados 


26-introdução da seção 
-OK 

27-criação de banco de dados 
-criando bancos e tabelas 
-criando um banco 
	CREATE DATABASE <nome do banco>

28-verificando banco de dados 
-para listar todos os bancos 
	SHOW DATABASES;

29-removendo banco de dados 
-para deletar um banco em específico usamos o comando, porém depois não tem volta
	DROP DATABASE <nome do banco>

30-exercício 3 
-criar um banco com o nome de 'computador'
-verificar se o banco foi criado 
-dropar o banco 

31-exportando banco de dados 
-para exportar um banco (mandar para fora, gerar um arquivo), tudo ficará salvo em arquivo .sql 
	comando no terminal 
	mysqldump -u root nome do banco > nome do arquivo.sql
	ex: mysqldump -u root empresa2 > empresa2.sql

32-utilizando um banco de dados 
-para utilizar (apontar) um banco, para que os comandos seguidos, sejam direcionados a este banco
	USE nome do banco 
-sempre deve ser o primeiro comando, para ter certeza que está direcionando os comandos a este banco 
-é possível concatenar, selecionando primeiro o banco e depois atabela no mesmo comando 
	SELECT * FROM empresa.funcionarios;

33-conclusão da seção 
-OK 


seção 3-gerenciamento de tabelas 


34-introdução da seção 
-explicado que esta seção é focado na manipulação de tabelas 

35-o que é uma tabela? 
-tabela tem suas colunas (categorias e com tipos de dados determinados), tem também atributos/caracteristicas
	(não nulo, chave primária, auto incremento etc...) e dentro os dados, separados por linhas

36-criando uma tabela 
-para criar uma tabela, dentro de um banco já existente 
	CREATE TABLE <nome da tabela> (<coluna> <tipo de dado> (quantidade de caracteres))
	ex: CREATE TABLE pessoas (nome VARCHAR(100), cpf CHAR(11), descricao MEDIUMTEXT);
-o tipo de dado mais comum e usado é o VARCHAR (texto/string)

37-removendo tabelas 
-para remover uma tabela de um banco específico 
	DROP TABLE <nome da tabela>

38-sobre os tipos de dados da SQL 
-os tipos de dado servem para classificar um dado inserido em uma coluna 
-ex: texto, data, número e outros 
-é possível também definir a quantidade máxima de caracteres
-são divididos em: texto, numérico, data e espacial 

39-tipos de dados de texto 
-CHAR, VARCHAR, TINYTEXT, MEDIUMTEXT 

40-exercício 4 
-criando um novo banco 
-criar um banco com o nome: teste_tipo_dados 

41-tabela com colunas do tipo texto
-criando uma tabela com tipos de texto 
	CHAR, VARCHAR e MEDIUMTEXT 
	CREATE TABLE produtos(nome VARCHAR(50), sku CHAR(5), INFORMACOES MEDIUMTEXT);

42-exercício 5 
-criar uma tabela chamada cadastro 
-com 2 campos como VARCHAR, o nome e sobrenome 
-limitar os 2 para 100 caracteres
CREATE TABLE cadastro(nome VARCHAR(100), sobrenome VARCHAR(100)); 

43-inserindo dados em uma tabela (especificando qual dado irá para qual coluna desta tabela)
-o comando para inserir dados em uma tabela é: 
	INSERT INTO <nome da tabela>(<nome da coluna>)VALUES(<valores>);
	ex: INSERT INTO produtos (nome, sku, informacoes) VALUES ("Playstation 5", "PS5", "É um videogame de última geração");

44-exercício 6
-criar 2 inserts para inserir produtos na tabela produtos 
-depois selecione todos os dados

45-tipos numéricos 
-BIT (1 a 64 caracteres)
-TINYINT (1 A 255 caracteres)
-BOLL = false que é zero, outros valores são verdadeiros 
-INT valores gigantescos (MAIS USADO)

46-criando tabelas com dados numéricos 
-testando o BOOL e INT 
- CREATE TABLE servidores (nome VARCHAR(100), espaco_disco INT(10), ligado BOOL);
- INSERT INTO servidores(nome, espaco_disco, ligado) VALUES ("Servidor 1", 12338491, 0);

47-exercício 7 
-inserir mais 2 servidores na tabela servidores
-selecionar todos
-ok 

48-tipos de dado de data 
-os tipos de dados usados para data são: 
-DATE aceita data no formato YYYY-MM-DD 
-DATETIME aceita data no formato com horas também YYYY-MM-DD hh:mm:ss 
-TIMESTAMP aceita data no formato DATETIME, porém apenas entre os anos 1970 A 2038 

49-criando uma tabela com dados de data, DATAS SEMPRE ENTRE ""
-criando uma tabela com nomes e data de nascimento, usando o DATE 
-criado coluna de dados dentro desta tabela 

50-exercício 8
-inserir nome e data de nascimento na tabela 
-fazer sleeção de todos os dado 

51-porque escolher o tipo de dado correto? 
-tem que ser o mais próximo da necessidade em questão 
-o objetivo é otimizar o banco, economizar memória, aumentar desempenho

52-alteração de tabelas 
-há 3 tipos de alteração em SQL, todas começam com ALTER
-adição de colunas 
-remoção de colunas 
-modificar tipo de coluna

53-adicionar uma coluna 
-está inserindo uma coluna desta tabela, mas sem inserir dados
-ALTER TABLE <tabela> ADD COLUMN <nome> <tipo>
EX: ALTER TABLE funcionarios ADD COLUMN profissao VARCHAR(100);

54-exercício 9 
-adicionar coluna cpf CHAR(11) na tabela funcionarios
-adicionar outroa coluna qualquer 
-inserir dados 
-ok

55-removendo colunas 
-removendo colunas de uma tabela já existente 
ALTER TABLE <tabela> DROP COLUMN <nome da coluna>
ex: ALTER TABLE funcionarios DROP COLUMN profissao;

56-exercício 10 
-remova a coluna que você adicionou alteriormente no exercício 9 

57-alterando o tipo de dado de uma coluna 
-ALTER TABLE <tabela> MODIFY COLUMN <nome da coluna> <novo tipo>
-EX> ALTER TABLE funcionarios MODIFY COLUMN data_nascimento DATE;

58-conclusão da seção 
-ok 


seção 4-queries do CRUD 


59-introdução da seção 
-explicação sobre CRUD 

60-exercício 11
-criar banco chamado cadastro 
-neste banco, criar tabela chamado pessoas
-nesta tablea, cria colunas: nome, rg, cpf e limite 
-limite é um valor numérico 
-inserir 5 dados
-OK 

61-o que é CRUD? 
CRUD = create, read, update, delete (criar, let, atualizar, apagar)
-a maioria das aplicações web tem estas aplicações 

62-selecionando todos os dados 
-para selecionar todos os dados de uma tabela 
	Select * FROM <nome da tabela>

63-selecionando colunas específicas 
-serve para otimizar as querys, em vez de ficar trazendo tudo desnecessariamente 
-para sleecionar coluna específica, substitui o * pelo nome da tabela 
	SELECT coluna1, coluna2 FROM <nome da tabela>
	ex: SELECT rg, cpf FROM pessoas;

64-inserindo dados na tabela 
-para inserir dados em uma determinada coluna da tabela 
	INSERT INTO <tabela> (<colunas>) VALUES (valores)

65-a importância do WHERE 
-WHERE é usado como uma clausula de especificação, em uma query 
-por exemplo, quais registros serão atualizados em um update 
-usado sempre em filtros, pois especifica uma busca
-ex: SELECT * FROM pessoas WHERE nome = "Renan";

66-atualizando dados 
-a instrução UPDATE é usada para atualizar dados
	UPDATE <tabela> SET <coluna=valor> WHERE <condição>
-atualizando a tabela pessoas, setando novo rg, onde o nome = "walter";
	ex: UPDATE pessoas SET rg=142092891 WHERE nome = "Walter";

67-exercício 12 
-atualizar o limite da quarta tabela para 1000 
-ok 

68-deletando registros 
-importante utilizar o WHERE para não deletar todos os dados, e sim, somente a linha 
	que seja informada através da condição
-utiliza-se a instrução DELETE 
	DELETE FROM <nome da tabela> WHERE <condição> 
	ex: DELETE FROM pessoas WHERE nome = "Charlene";

69-exercício 13 
-deletar registros que tenham limite maior que 2000 

70-o famoso DELETE sem WHERE 
-sem WHERE, irá deletar todos os dados da tabela em questão 
-uma boa técnica é sempre dar um SELECT no dado em questão para confirmar antes de 
	deletar 

71-conclusão da seção 
-OK 


seção 5-avançando em SELECT 


72-introdução da seção 
-SELECT é a query mais importante do SQL, a operação mais realizada é de busca(SELECT)

73-instalando um banco de dados 
-instalando um banco maior para esta seção 
-link: https://github.com/datacharmer/test_db
-download manual da pasta toda 
-acessa a pasta pelo CMD do XAMPP 
- CREATE DATABASE employees;
- USE employees;
- source employees.sql; 

74-a importância do SELECT 
-a maioria das ações em banco envolvem consulta (SELECT)
-em decorrência disso, é o que tem o maior número de variações 
-possibilita assim, a criação de filtros avançados 

75-operadores do SQL 
-operadores de comparação (>, <, >=, <=, =) para filtrar dados, baseado em comparações 
-BETWEEN - seleção entre um intervalo 
-LIKE - seleção por meio de algum padrão 
-IN - seleção entre um conjunto de valores específicos 

76-utilizando o WHERE 
- O WHERE (onde)

77-exercício 14 
-selecionar na tabela titles todas as colunas, porém apenas as emp_no for >= a 11500 

78-utilizando o DISTINCT (traz um de cada, que tem em uma coluna, de uma tabela)
-vai selecionar apenas as variações de valores, ou seja, 1 de cada valor que seja igual 
-por exemplo, se tem sexo M e F, vai mostrar um de cada  
	ex: se temos 10 cidades diferentes de usuários no sistema, só recebemos 10 resultados; 
	SELECT DISTINCT <coluna> FROM <tabela>

79-operadores lógicos 
-podemos combinar o WHERE com operadores lógicos, AND, OR, NOT 
	ex: WHERE id > 10 OR salario > 5000;

80-utilizando o AND
-sua funcionalidade é igual como usado em funções 
	ex: WHERE salario > 1000 AND cargo = 'programador';
	ex: SELECT * FROM salaries WHERE salary > 155000 AND from_date > "1991-12-12";

81-utilizando o operador OR 
-sua funcionalidade é igual como usado em funções  
	WHERE salario > 5000 OR profissao = "programador";
	ex: SELECT * FROM titles WHERE title = "Senior Enginner" OR title = "Staff" OR emp_no > 12500 ORDER BY emp_no DESC;

82-utilizando o NOT (negação)
-sua funcionalidade é igual como usado em funções  
	ex: SELECT * FROM titles WHERE NOT title = "Staff" AND NOT title = "Senior Engineer";

83-ordenando resultado de consulta ORDER BY
-o ORDER BY é uma instrução para ordenação de resultados 
-é possível usa-lo de maneira ASC ou DESC 
-geralmente é utilizado após o WHERE e baseado a alguma coluna 
-ex: SELECT * FROM departments ORDER BY dept_name DESC;

84-exercício 15 
-seelcionar na tabela titles todas as colunas, porém ordenar o títulos de maneira descrecente 

85-limitando resultados de consultas LIMIT 
-serve para limitar os resultados e tornar a consulta mais rápida 
-por exemplo, para limitar o resultado em 15, basta usar LIMIT 15, retornando os 15 primeiros 
-pode ser unido com where 
-ex> SELECT * FROM salaries ORDER BY salary DESC LIMIT 5;

86-exercício 16 
-selecionar a tabela titles, ordenado ascendente pela coluna title e retornando os 5 primeiros

87-introdução as funções do SQL 
-funções são blocos de códigos reaproveitáveis 
-um exemplo é a função MAX, que retorna o maior valor de uma determinada coluna 

88-função MIN 
-vai retornar o menor valor de uma coluna específica 
-no parâmetro da função vai o nome da coluna, e depois do FROM, o nome da tabela
ex: SELECT MIN(salary) FROM salaries;

89-função MAX
-vai retornar o maior valor de uma coluna específica 
-no parâmetro da função vai o nome da coluna, e depois do FROM, o nome da tabela
ex: SELECT MAX(salary) FROM salaries;

90-função COUNT 
-serve para retornar uma quantidade, é um tipo de contador
ex: SELECT COUNT(salary) FROM salaries WHERE salary > 150000;

91-exercício 17 
-fazer um SELECT que conte o número de registros na tabela departments 

92-função AVG
-ela retorna a média de uma determinada coluna 
-AVG significa average(média)
ex: SELECT AVG(salary) FROM salaries;

93-função SUM
-SUM retorna a soma de todos os valores contídos na coluna informada 
	SELECT SUM(salary) FROM SALARIES;

94-operador LIKE 
-utiliza-se em conjunto com o WHERE 
-o LIKE serve para filtrar de maneira mais precisa, buscando com 
	a ajuda do % %, bucando no início ou final da palavra 
	SELECT * from employees WHERE first_name LIKE "%Parto%";

95-exercício 18 
-fazer um SELECT na tabela titles 
-elecionar todos os titulos que contenham Engineer 
	SELECT * FROM titles WHERE title LIKE "Engineer";

96-selecionando itens de uma lista com IN 
-traz dados específicos, dentro do que está especificado no In 
	ex: SELECT * FROM  dept_emp WHERE dept_no IN ('d004', 'd005', 'd006');

97-exercício 19 
-na tabela employees fazer um SELECT de todos os registros que contenham no sobrenome: 
	Facello e Peac; 
	SELECT * FROM employees WHERE last_name IN ('Facello', 'Peac'); 

98-selecionando faixas de valores com BETWEEN 
-o BETWEEN (entre) recebe uma faixa de valores 
-o resultado retornado serão aqueles que estiverem dentro desta faixa especificada 
-o AND é usado para determinar o intervalo 
	ex: SELECT * FROM dept_emp WHERE dept_no BETWEEN 'd003' AND 'd005';

99-exercício 20 
-fazer um SELECT na tabela de salário 
-selecionar os salários entre 125000 a 175000 
-usar o BETWEEN 
	ex: SELECT * FROM salaries WHERE salary BETWEEN '125000' AND '175000';

100-criando ALIAS (apelidos) para colunas 
-cria um pseudônimo para a coluna em questão 
-o AS é utilizado para determinar como a coluna deve se chamar 
	ex: SELECT SUM(salary)AS soma_salario FROM salaries;

101-conclusão da seção 
-ok 


seção 6-criando constraints nas tabelas 

102-introdução da seção 
-constraints = restrições 

103-o que são constraints? 
-são regras(restrições) que determinam como os campos serão preenchidos 
-ex: NOT NULL = o cmapo não pode ser nulo 
-as constraints são adicionadas na criação da tabela geralmente, porém podem ser alteradas 
-servem para padronizar o projeto 

104-utilizando o NOT NULL 
-ela força um valor de uma coluna não ser nulo
-a instrução é colocada após o nome e tipo da coluna ser declarado 
	ex: nome VARCHAR(100) NOT NULL 
	CREATE TABLE pessoas (
	nome VARCHAR(100) NOT NULL,
	idade INT
	);

105-dados únicos com UNIQUE 
-garante que entre os dados de uma coluna, não havarão dados iguais 
	ALTER TABLE pessoas ADD COLUMN email VARCHAR(255) UNIQUE;

106-adicionando chave primária as tabelas 
-a constraints PRIMARY KEY só pode ser adicionada em uma única coluna da tabela, geralmente o id 
-é um identificador único 
	CREATE TABLE produtos (
	id INT NOT NULL,
	nome VARCHAR(255),
	sku VARCHAR(10),
	PRIMARY KEY(id)
	);

107-valores automáticos com AUTO INCREMENT 
-serve para adicionar a quantidade de um em todo registro adicionado 
-muito utilizado na coluna id, não sendo necessário se preocupar com ela no INSERT 

108-relacionamentos entre tabelas com FOREIGN KEY 
-é a ligação entre uma tabela e outra 
-impede remoção de dados que tem ligação entre tabelas 
	para deletar, primeiro precisa deletar os dados referenciados (a que possui a coluna da foreign key)
	CREATE TABLE pessoas (
		id INT PRIMARY KEY AUTO_INCREMENT NOT NULL,
		nome VARCHAR(100) NOT NULL,
		idade INT
		);

	CREATE TABLE enderecos (
		id INT PRIMARY KEY AUTO_INCREMENT NOT NULL,
		rua VARCHAR(100),
		numero VARCHAR(100),
		pessoa_id INT NOT NULL
		FOREIGN KEY (pessoa_id) REFERENCES pessoas(id)
		);


