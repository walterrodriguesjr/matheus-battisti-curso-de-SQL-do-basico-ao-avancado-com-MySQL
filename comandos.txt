1-criar um banco de dados 
    CREATE DATABASE <nome>;

2-listar todos os bancos de dados 
    SHOW DATABASES;

3-para selecionar todos os dados de uma tabela de um determinado banco
	SELECT * FROM <nome da tabela>

4-apontar para um banco em específico, para que os comandos seguintes sejam para este banco
    USE <nome do banco>

5-para deletar um banco em específico usamos o comando 
	DROP DATABASE <nome do banco>

6-para exportar um banco (mandar para fora, gerar um arquivo), tudo ficará salvo em arquivo .sql 
	comando no terminal 
	mysqldump -u root nome do banco > nome do arquivo.sql
	ex: mysqldump -u root empresa2 > empresa2.sql

7-é possível concatenar, selecionando primeiro o banco e depois a tabela no mesmo comando 
	SELECT * FROM empresa.funcionarios;

8-para criar uma tabela, dentro de um banco já existente 
	CREATE TABLE <nome da tabela> (<coluna> <tipo de dado>)
    ex: CREATE TABLE pessoas (nome VARCHAR(100), cpf CHAR(11), descricao MEDIUMTEXT);

9-para remover uma tabela de um banco específico 
	DROP TABLE <nome da tabela>

10-o comando para inserir dados em uma tabela é: 
	INSERT INTO <nome da tabela>(<nome da coluna>)VALUES(<valores>);
	ex: INSERT INTO produtos (nome, sku, informacoes) VALUES ("Playstation 5", "PS5", "É um videogame de última geração");

11-listar todas as linhas de dados de uma tabela, já estando apontando para um determinado DB
	SELECT * FROM <tabela>
	ex: SELECT * FROM servidores; 

12-criando uma tabela com coluna no formato DATE 
	CREATE TABLE aniversario(nome VARCHAR(100), nascimento DATE); 
-inserindo dados com DATE dentro desta tabela 
	INSERT INTO aniversario(nome, nascimento) VALUES ("João", "1986-03-12");

13-adicionar uma coluna vazia em uma tabela
-está inserindo uma coluna desta tabela, mas sem inserir dados
-ALTER TABLE <tabela> ADD COLUMN <nome> <tipo>
EX: ALTER TABLE funcionarios ADD COLUMN profissao VARCHAR(100);

13-removendo colunas 
-removendo colunas de uma tabela já existente 
ALTER TABLE <tabela> DROP COLUMN <nome da coluna>
ex: ALTER TABLE funcionarios DROP COLUMN profissao;

14-alterando o tipo de dado de uma coluna 
-ALTER TABLE <tabela> MODIFY COLUMN <nome da coluna> <novo tipo>
-EX> ALTER TABLE funcionarios MODIFY COLUMN data_nascimento DATE;

15-selecionando colunas específicas 
-serve para otimizar as querys, em vez de ficar trazendo tudo desnecessariamente 
-para sleecionar coluna específica, substitui o * pelo nome da tabela 
	SELECT coluna1, coluna2 FROM <nome da tabela>
	ex: SELECT rg, cpf FROM pessoas;

16-especificando uma query com WHERE 
-ex1: SELECT * FROM pessoas WHERE nome = "Renan";
-a instrução UPDATE é usada para atualizar dados
	UPDATE <tabela> SET <coluna=valor> WHERE <condição>
-atualizando a tabela pessoas, setando novo rg, onde o nome = "walter";
	ex: UPDATE pessoas SET rg=142092891 WHERE nome = "Walter";

17-deletando registros 
-importante utilizar o WHERE para não deletar todos os dados, e sim, somente a linha 
	que seja informada através da condição
-utiliza-se a instrução DELETE 
	DELETE FROM <nome da tabela> WHERE <condição> 
	ex: DELETE FROM pessoas WHERE nome = "Charlene";

18-operadores do SQL 
-operadores de comparação (>, <, >=, <=, =) para filtrar dados, baseado em comparações 
-BETWEEN - seleção entre um intervalo 
-LIKE - seleção por meio de algum padrão 
-IN - seleção entre um conjunto de valores específicos 

19-utilizando o DISTINCT (traz um de cada, que tem em uma coluna, de uma tabela)
-vai selecionar apenas as variações de valores, ou seja, 1 de cada valor que seja igual 
-por exemplo, se tem sexo M e F, vai mostrar um de cada  
	ex: se temos 10 cidades diferentes de usuários no sistema, só recebemos 10 resultados; 
	SELECT DISTINCT <coluna> FROM <tabela>

20-operadores lógicos 
-podemos combinar o WHERE com operadores lógicos, AND, OR, NOT 
	ex: WHERE id > 10 OR salario > 5000;

21-utilizando o AND
-sua funcionalidade é igual como usado em funções 
	ex: WHERE salario > 1000 AND cargo = 'programador';
	ex: SELECT * FROM salaries WHERE salary > 155000 AND from_date > "1991-12-12";

22-utilizando o operador OR 
-sua funcionalidade é igual como usado em funções  
	WHERE salario > 5000 OR profissao = "programador";
	ex: SELECT * FROM titles WHERE title = "Senior Enginner" OR title = "Staff" OR emp_no > 12500 ORDER BY emp_no DESC;

23-utilizando o NOT (negação)
-sua funcionalidade é igual como usado em funções  
	ex: SELECT * FROM titles WHERE NOT title = "Staff" AND NOT title = "Senior Engineer";

24-ordenando resultado de consulta ORDER BY
-o ORDER BY é uma instrução para ordenação de resultados 
-é possível usa-lo de maneira ASC ou DESC 
-geralmente é utilizado após o WHERE e baseado a alguma coluna 
-ex: SELECT * FROM departments ORDER BY dept_name DESC;

25-limitando resultados de consultas LIMIT 
-serve para limitar os resultados e tornar a consulta mais rápida 
-por exemplo, para limitar o resultado em 15, basta usar LIMIT 15, retornando os 15 primeiros 
-pode ser unido com where 
-ex> SELECT * FROM salaries ORDER BY salary DESC LIMIT 5;

FUNÇÕES

26-função MIN 
-vai retornar o menor valor de uma coluna específica 
-no parâmetro da função vai o nome da coluna, e depois do FROM, o nome da tabela
ex: SELECT MIN(salary) FROM salaries;

27-função MAX
-vai retornar o maior valor de uma coluna específica 
-no parâmetro da função vai o nome da coluna, e depois do FROM, o nome da tabela
ex: SELECT MAX(salary) FROM salaries;

28-função COUNT 
-serve para retornar uma quantidade, é um tipo de contador
ex: SELECT COUNT(salary) FROM salaries WHERE salary > 150000;

29-função AVG
-ela retorna a média de uma determinada coluna 
-AVG significa average(média)
ex: SELECT AVG(salary) FROM salaries;

30-
